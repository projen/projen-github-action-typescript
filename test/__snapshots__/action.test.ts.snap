// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GitHubActionTypeScriptProject source code default source code 1`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
import * as core from '@actions/core';
import { ActionManager } from './action';

async function run() {
  const input1: string = core.getInput('input1');
  const input2: number = Number(core.getInput('input2'));
  const input3: string[] = renderListInput(core.getInput('input3'));
  const input4: number[] = toNumber(renderListInput(core.getInput('input4')));
  const input5: Record<string,string> = JSON.parse(core.getInput('input5'));
  const action = new ActionManager({
    input1,
    input2,
    input3,
    input4,
    input5,
  });

  await action.main();
}

/**
 * Renders a TypeScript list based on what we expect the list to look like in yaml.
 * We expect to see something like \\"[item1,item2]\\". GitHub will return '' if the input
 * is not defined, which will get translated by this function to [].
 */
function renderListInput(rawInput: string): string[] {
  return (rawInput === '' || rawInput === '[]') ? [] : rawInput.replace(/\\\\[|\\\\]/gi, '').split(',');
}

function toNumber(list: string[]): number[] {
  return list.map((i) => Number(i));
}

run().catch(error => {
  core.setFailed(error.message);
});"
`;

exports[`GitHubActionTypeScriptProject source code default source code 2`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
export interface ActionManagerOptions {
  /**
   * my first input
   */
  readonly input1: string;
  /**
   * my second input
   *
   * @default - 0
   */
  readonly input2?: number;
  /**
   * my third input
   *
   * @default - [first,second]
   */
  readonly input3?: string[];
  /**
   * my fourth input
   */
  readonly input4: number[];
  /**
   * my fifth input
   *
   * @default - {}
   */
  readonly input5?: Record<string,string>;
}"
`;

exports[`GitHubActionTypeScriptProject source code default source code 3`] = `
"// import * as github from '@actions/github';
import { ActionManagerOptions } from './action-options';

export class ActionManager {

  constructor(options: ActionManagerOptions) {
    console.log(options);
  }

  main() {
    // this is your action's entrypoint
  }
}"
`;

exports[`GitHubActionTypeScriptProject source code refuse projen managed source code 1`] = `
"import * as core from '@actions/core';
import { ActionManager } from './action';

async function run() {
  const input1: string = core.getInput('input1');
  const input2: number = Number(core.getInput('input2'));
  const input3: string[] = renderListInput(core.getInput('input3'));
  const input4: number[] = toNumber(renderListInput(core.getInput('input4')));
  const input5: Record<string,string> = JSON.parse(core.getInput('input5'));
  const action = new ActionManager({
    input1,
    input2,
    input3,
    input4,
    input5,
  });

  await action.main();
}

/**
 * Renders a TypeScript list based on what we expect the list to look like in yaml.
 * We expect to see something like \\"[item1,item2]\\". GitHub will return '' if the input
 * is not defined, which will get translated by this function to [].
 */
function renderListInput(rawInput: string): string[] {
  return (rawInput === '' || rawInput === '[]') ? [] : rawInput.replace(/\\\\[|\\\\]/gi, '').split(',');
}

function toNumber(list: string[]): number[] {
  return list.map((i) => Number(i));
}

run().catch(error => {
  core.setFailed(error.message);
});"
`;

exports[`GitHubActionTypeScriptProject source code refuse projen managed source code 2`] = `
"export interface ActionManagerOptions {
  /**
   * my first input
   */
  readonly input1: string;
  /**
   * my second input
   *
   * @default - 0
   */
  readonly input2?: number;
  /**
   * my third input
   *
   * @default - [first,second]
   */
  readonly input3?: string[];
  /**
   * my fourth input
   */
  readonly input4: number[];
  /**
   * my fifth input
   *
   * @default - {}
   */
  readonly input5?: Record<string,string>;
}"
`;

exports[`GitHubActionTypeScriptProject source code refuse projen managed source code 3`] = `
"// import * as github from '@actions/github';
import { ActionManagerOptions } from './action-options';

export class ActionManager {

  constructor(options: ActionManagerOptions) {
    console.log(options);
  }

  main() {
    // this is your action's entrypoint
  }
}"
`;
